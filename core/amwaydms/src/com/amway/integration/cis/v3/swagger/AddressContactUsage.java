/**
 * Magic DMS RESTful Services
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.amway.integration.cis.v3.swagger;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * AddressContactUsage
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-05-10T10:19:16.797+03:00")
public class AddressContactUsage   {
  @SerializedName("contactPointPurposeCd")
  private String contactPointPurposeCd = null;

  @SerializedName("primaryFlag")
  private Boolean primaryFlag = null;

  @SerializedName("careOf")
  private String careOf = null;

  public AddressContactUsage contactPointPurposeCd(String contactPointPurposeCd) {
    this.contactPointPurposeCd = contactPointPurposeCd;
    return this;
  }

   /**
   * <a href='/DMS_Service_Web/DomainCodeLookUp.jsp?code=CNPTU'>Reference to contact point purpose codes</a>
   * @return contactPointPurposeCd
  **/
  @ApiModelProperty(example = "null", required = true, value = "<a href='/DMS_Service_Web/DomainCodeLookUp.jsp?code=CNPTU'>Reference to contact point purpose codes</a>")
  public String getContactPointPurposeCd() {
    return contactPointPurposeCd;
  }

  public void setContactPointPurposeCd(String contactPointPurposeCd) {
    this.contactPointPurposeCd = contactPointPurposeCd;
  }

  public AddressContactUsage primaryFlag(Boolean primaryFlag) {
    this.primaryFlag = primaryFlag;
    return this;
  }

   /**
   * Primary flag
   * @return primaryFlag
  **/
  @ApiModelProperty(example = "null", required = true, value = "Primary flag")
  public Boolean getPrimaryFlag() {
    return primaryFlag;
  }

  public void setPrimaryFlag(Boolean primaryFlag) {
    this.primaryFlag = primaryFlag;
  }

  public AddressContactUsage careOf(String careOf) {
    this.careOf = careOf;
    return this;
  }

   /**
   * Care Of
   * @return careOf
  **/
  @ApiModelProperty(example = "null", value = "Care Of")
  public String getCareOf() {
    return careOf;
  }

  public void setCareOf(String careOf) {
    this.careOf = careOf;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressContactUsage addressContactUsage = (AddressContactUsage) o;
    return Objects.equals(this.contactPointPurposeCd, addressContactUsage.contactPointPurposeCd) &&
        Objects.equals(this.primaryFlag, addressContactUsage.primaryFlag) &&
        Objects.equals(this.careOf, addressContactUsage.careOf);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactPointPurposeCd, primaryFlag, careOf);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressContactUsage {\n");
    
    sb.append("    contactPointPurposeCd: ").append(toIndentedString(contactPointPurposeCd)).append("\n");
    sb.append("    primaryFlag: ").append(toIndentedString(primaryFlag)).append("\n");
    sb.append("    careOf: ").append(toIndentedString(careOf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

