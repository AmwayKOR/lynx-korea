<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 [y] hybris Platform

 Copyright (c) 2017 SAP SE or an SAP affiliate company.  All rights reserved.

 This software is the confidential and proprietary information of SAP
 ("Confidential Information"). You shall not disclose such Confidential
 Information and shall use it only in accordance with the terms of the
 license agreement you entered into with SAP.
-->
<!--
 All hybris buildcallbacks.xml macrodefinitions:
 
 Build/Documentation
 
	 before/after ant macro "clean"
		 <macrodef name="amwayapaccore_before_clean"/>
		 <macrodef name="amwayapaccore_after_clean"/>

	 before/after ant macro "build"
		 <macrodef name="amwayapaccore_before_build"/>
		 <macrodef name="amwayapaccore_after_build"/>

	 before/after ant macro "compile_core" - the core module of the extension
		 <macrodef name="amwayapaccore_before_compile_core">
		 <macrodef name="amwayapaccore_after_compile_core">

	 before/after ant macro "compile_web" - the web module of the extension
		 <macrodef name="amwayapaccore_before_compile_web" />
		 <macrodef name="amwayapaccore_after_compile_web" />

	 before/after ant macro "compile_hmc" - the hmc module of the extension
		 <macrodef name="amwayapaccore_before_compile_hmc" />
		 <macrodef name="amwayapaccore_after_compile_hmc" />
 
 Preparing extension
 
	 will be called in the beginning of the ant call and only once (also when using multiple 
	 ant targets e.g. ant build yunittest)
		 <macrodef name="amwayapaccore_only_once_prepare"/>
 
 Creating ear module/production
 
	 before/after ant macro "ear"
		 <macrodef name="amwayapaccore_before_ear"/>
		 <macrodef name="amwayapaccore_after_ear"/>

	 before/after ant macro "production" - for hybris server only
		 <macrodef name="amwayapaccore_before_production" />
		 <macrodef name="amwayapaccore_after_production" />
 
 JUnit Test
 
	 before/after ant macro "yunitinit" 
		 <macrodef name="amwayapaccore_before_yunitinit" />
		 <macrodef name="amwayapaccore_after_yunitinit" />

	 before/after ant macro "yunit"
		 <macrodef name="amwayapaccore_before_yunit" />
		 <macrodef name="amwayapaccore_after_yunit" /> 

 Distribution package
 
 	 before/after ant macro "dist" - internal target; only for use when platform is available in source code
		 <macrodef name="amwayapaccore_after_dist"/>
		 <macrodef name="amwayapaccore_before_dist"/>

	 before/after ant macro "dist_copy" - internal target; only for use when platform is available in source code
		 <macrodef name="amwayapaccore_before_dist_copy"/>
		 <macrodef name="amwayapaccore_after_dist_copy"/>

-->
<project name="amwayapaccore_buildcallbacks" xmlns:jacoco="antlib:org.jacoco.ant">

	<macrodef name="amwayapaccore_after_build">
		<sequential>
			<impexGenerate extname="amwayapaccore"/>
		</sequential>
	</macrodef>

	<macrodef name="amwayapaccore_after_clean">
		<sequential>
			<delete failonerror="false" file="${ext.amwayapaccore.path}/resources-lang/touch_impexgen"/>
		</sequential>
	</macrodef>

	<macrodef name="amwayapaccore_after_dist_copy">
		<sequential>
			<copy preservelastmodified="true" todir="${destination.folder}/../installer/recipes">
				<fileset dir="${ext.amwayapaccore.path}/../recipes/"/>
			</copy>
			<if>
				<istrue value="${dist.development.dist}"/>
				<then>
					<copy preservelastmodified="true" todir="${destination.develop.folder}/../installer/recipes">
						<fileset dir="${ext.amwayapaccore.path}/../recipes/"/>
					</copy>
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- exclude impex files from localization -->
	<patternset id="amwayapaccore.localization.pattern">
		<patternset refid="localization.defaultpattern"/>
		<exclude name="**/*.impex"/>
	</patternset>

	<!-- Overriding jacoco jar to 0.7.5.201505241946 instead of OOTB 0.6.4.201312101107 since it causes versioning issue with java 8 -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${ext.amwayapaccore.path}/lib/jacocoant.jar" />
	</taskdef>

	<!-- Overriding sonar ant task to 2.5 instead of OOTB 2.1 since it causes versioning issues with java 8 -->
	<taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
		<classpath path="${ext.amwayapaccore.path}/lib/sonarqube-ant-task-2.5.jar" />
	</taskdef>

	<!-- Adding new ant task for supporting unit tests coverage only via JaCoCo -->
	<target name="jacocounittests" description="runs unit tests with JaCoCo attached">

		<echo level="info" message="*****************************************************************" />
		<echo level="info" message="- Executing JaCoCo for Unit Tests" />
		<echo level="info" message="-------------------------------------------------" />
		<echo level="info" message="- jacoco.unittests.destfile           : ${jacoco.unittests.destfile}" />
		<echo level="info" message="- jacoco.excludes                     : ${jacoco.excludes}" />
		<echo level="info" message="*****************************************************************" />

		<jacoco:agent property="agentvmparam" append="true" output="file" destfile="${jacoco.unittests.destfile}" excludes="${jacoco.excludes}" />

		<property name="testclasses.extensions" value="${extname}" />
		<ant dir="${platformhome}" target="unittests" inheritrefs="false">
			<property name="standalone.javaoptions" value="${agentvmparam} ${standalone.javaoptions}" />
		</ant>
	</target>

	<!-- Adding new ant task for supporting only integration tests coverage via JaCoCo -->
	<target name="jacocointegrationtests" description="runs integration tests with JaCoCo attached">

		<echo level="info" message="*****************************************************************" />
		<echo level="info" message="- Executing JaCoCo for Integration Tests" />
		<echo level="info" message="-------------------------------------------------" />
		<echo level="info" message="- jacoco.integrationtests.destfile    : ${jacoco.integrationtests.destfile}" />
		<echo level="info" message="- jacoco.excludes                     : ${jacoco.excludes}" />
		<echo level="info" message="*****************************************************************" />

		<jacoco:agent property="agentvmparam" append="true" output="file" destfile="${jacoco.integrationtests.destfile}" excludes="${jacoco.excludes}" />

		<property name="testclasses.extensions" value="${extname}" />
		<ant dir="${platformhome}" target="integrationtests" inheritrefs="false">
			<property name="standalone.javaoptions" value="${agentvmparam} ${standalone.javaoptions}" />
		</ant>
	</target>
	
	<macrodef name="sonarmultiJAVA">
		<attribute name="modules"/>
			<sequential>
				<property name="sonar.extensions" value="@{modules}" />
				<property name="sonar.sourceEncoding" value="UTF-8"/>
				<property name="sonar.projectName" value="Superproject"/>
				<property name="sonar.projectKey" value="superprojectkey" />
				<property name="sonar.projectVersion" value="1.0" />
				
				<echo level="info" message=" " />
				<echo level="info" message="*************************************************" />
				<echo level="info" message="- Executing sonar" />
				<echo level="info" message="-------------------------------------------------" />
				<echo level="info" message="- sonar.extensions        : ${sonar.extensions}" />
				<echo level="info" message="- sonar.jdbc.url        : ${sonar.jdbc.url}" />
				<echo level="info" message="- sonar.projectName        : ${sonar.projectName}" />
				<echo level="info" message="- sonar.project.key        : ${sonar.projectKey}" />
				<echo level="info" message="- sonar.project.version        : ${sonar.projectVersion}" />
				<echo level="info" message="- sonar.excludedExtensions        : ${sonar.excludedExtensions.clean}" />
				<echo level="info" message="- sonar.language        : ${sonar.language}" />
				<echo level="info" message="*************************************************" />
				<echo level="info" message=" " />
			
				<var name="modulerelative" value="" />

				<for list="@{modules}" param="extname" delimiter=",">
					<sequential>
						<!-- Only modules with src folder -->
						<if>
							<or>
								<available file="${ext.@{extname}.path}/src" type="dir" />
								<available file="${ext.@{extname}.path}/web/src" type="dir" />
							</or>
							<then>
							<!-- generate modules for sonar -->
							<property name="@{extname}.relative" value ="${ext.@{extname}.path}" relative="true"/>
							<var name="modulerelative" value="${modulerelative}${@{extname}.relative}," />
							
							<!-- settings for each module -->
							<property name="${@{extname}.relative}.sonar.projectName" value="@{extname}"/>
							<property name="${@{extname}.relative}.sonar.projectKey" value="@{extname}" />
							<property name="${@{extname}.relative}.sonar.projectVersion" value="1.0" />
		
							<!-- set src for each module folder -->
							<if>
								<available file="${ext.@{extname}.path}/src" type="dir" />
								<then>
									<if>
										<available file="${ext.@{extname}.path}/gensrc" type="dir" />
										<then>
											<property name="${@{extname}.relative}.sonar.sources" value="src,gensrc" />
										</then>
										<else>
											<property name="${@{extname}.relative}.sonar.sources" value="src" />
										</else>
									</if>
								</then>
								<elseif>
									<available file="${ext.@{extname}.path}/web/src" type="dir" />
									<then>
										<if>
											<available file="${ext.@{extname}.path}/web/gensrc" type="dir" />
										
											<then>
												<property name="${@{extname}.relative}.sonar.sources" value="web/src,web/gensrc" />
											</then>
											<else>
												<property name="${@{extname}.relative}.sonar.sources" value="web/src" />
											</else>
										</if>	
									</then>
								</elseif>
							</if>
								
							<!-- test source -->
							<if>
								<available file="${ext.@{extname}.path}/testsrc" type="dir" />
								<then>
									<property name="${@{extname}.relative}.sonar.tests" location="${ext.@{extname}.path}/testsrc"/>
								</then>
							</if>

							<!-- set classes/bin folder for required extensions-->
							<var name="requiredcp" value="" />
						
							<for list="${all.required.extensions.for.@{extname}}" param="reqextname">			  
								<sequential>
									<if>
										<available file="${ext.@{reqextname}.path}/classes" type="dir" />
									<then>	
										<var name="requiredcp" value="${requiredcp},${ext.@{reqextname}.path}/classes" />
									</then>
									</if>
									<if>
										<available file="${ext.@{reqextname}.path}/bin" type="dir" />
									<then>	
										<var name="requiredcp" value="${requiredcp},${ext.@{reqextname}.path}/bin" />
									</then>
									</if>
								</sequential>  
							</for>
								
							<path id='sonar.libraries.classpath'>
								<fileset erroronmissingdir="false" dir="${@{extname}.relative}/lib">
									<include name="**/*.jar" />
								</fileset>
								<fileset erroronmissingdir="false" dir="${@{extname}.relative}/web/webroot/WEB-INF/lib">
									<include name="**/*.jar" />
								</fileset>
								<fileset dir="${platformhome}/lib/">
									<include name="**/*.jar" />
								</fileset>
								<fileset dir="${platformhome}/bootstrap/bin/">
									<include name="**/*.jar" />
								</fileset>
								<fileset dir="${bundled.tomcat.home}/lib/">
									<include name="**/*.jar" />
								</fileset>
								<fileset dir="${platformhome}/resources/configtemplates/develop/licence/">
									<include name="**/*.jar" />
								</fileset>					
							</path>
								
							<!-- get all jars from required extensions -->
							<var name="reqextname.lib.path" value="" />
							
							<for list="${all.required.extensions.for.@{extname}}" param="reqextname" delimiter=",">
								<sequential>
									<if>
										<!-- Test if lib folder exists... -->
										<available file="${ext.@{reqextname}.path}/lib" type="dir" />
										<then>
											<!-- ... and has content -->
											<if>
												<length length="0" when="greater">
								                       <fileset dir="${ext.@{reqextname}.path}/lib" followsymlinks="false"/>
								                 </length>
												<then>	
													<var name="reqextname.lib.path" value="${reqextname.lib.path},${ext.@{reqextname}.path}/lib/*.jar" />
												</then>
											</if>
										</then>
									</if>
									
									<if>
										<!-- Test if web lib folder exists... -->
										<available file="${ext.@{reqextname}.path}/web/webroot/WEB-INF/lib" type="dir" />
										<then>
											<!-- ... and has content -->
											<if>
												<length length="0" when="greater">
								                       <fileset dir="${ext.@{reqextname}.path}/web/webroot/WEB-INF/lib" followsymlinks="false"/>
								                 </length>
												<then>
													<var name="reqextname.lib.path" value="${reqextname.lib.path},${ext.@{reqextname}.path}/web/webroot/WEB-INF/lib/*.jar" />
												</then>
											</if>
										</then>
									</if>
								</sequential>
							</for> 	
							
							<!-- Standard classpath -->
							<pathconvert property="standart.@{extname}.cp" refid="sonar.libraries.classpath" pathsep=","/>
						
							<!-- libraries from required extensions classpath -->
							<property name="${@{extname}.relative}.sonar.java.libraries" value="${standart.@{extname}.cp},${reqextname.lib.path}" />
					
							<!-- put binaries from this extension and required extensions togetter and set property-->
							<if>
								<available file="${@{extname}.relative}/classes" type="dir" />
								<then>	
									<property name="${@{extname}.relative}.sonar.java.binaries" value="classes,${requiredcp}" />
								</then>
								<elseif>
									<available file="${@{extname}.relative}/web/webroot/WEB-INF/classes" type="dir" />
									<then>
										<property name="${@{extname}.relative}.sonar.java.binaries" value="web/webroot/WEB-INF/classes,${requiredcp}" />
									</then>	
								</elseif>
							</if>
							</then>
						</if>
					</sequential>
				</for>
					
				<echo level="info" message="cleaning the list of modules sent to sonar" />
				<propertyregex property="modulerelativeclean" input="${modulerelative}" regexp=",$" replace="" />
							
			<property name="sonar.modules" value="${modulerelativeclean}" />
				
			</sequential>
		</macrodef>
	

</project>
